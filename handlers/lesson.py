import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import db_requests
from aiogram.fsm.context import FSMContext
from bot_init import bot
import json
from aiogram import types
import config
from aiogram.filters import StateFilter
from states.add_video_to_lesson import AddVideo
from states.add_additional_meterials import AddAdditionalMaterials
from states.add_description import AddLessonDescription
from states.delete_media_from_lesson import DeleteLessonMedia
from states.add_homework import AddHomework, AddTeachersComment
from states.add_user_homework import AddUserHomework
from states.edit_homework import EditHomework
from states.edit_name import EditLessonName

router = Router()  


@router.callback_query(F.data.startswith("select_lesson_"))
async def select_lesson(callback: CallbackQuery, state: FSMContext):
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    if not callback.data[14:].isnumeric():
        await callback.answer('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ –∏–∑ –º–µ–Ω—é', show_alert=True)
        return
    if await state.get_state() == 'AddUserHomework:waiting_for_media':
        fsmdata = await state.get_data()
        user_homework = fsmdata.get('user_homework')
        
        user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
        message_text = f'üìö <b>–£—á–µ–Ω–∏–∫ {user.user_name} –ø—Ä–∏—Å–ª–∞–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>'
        builder = InlineKeyboardBuilder()
        builder.button(text='üìñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'check_user_homework_{user_homework.id}')
        for admin in admins_ids:
            await bot.send_message(admin, message_text, reply_markup=builder.as_markup())

    await state.clear()
    lesson = await db_requests.get_lesson_by_id(callback.data[14:])
    lesson_media = await db_requests.get_lesson_media(lesson.id)
    builder = InlineKeyboardBuilder()
    message_text = (f'üëâüèª –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–∫ <b>{lesson.title}</b> –≤ –º–æ–¥—É–ª–µ <b>{lesson.module.title}</b>.\n\n')
    if lesson.description:
        message_text += lesson.description

    builder.button(text=f'üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ ({len(lesson_media)})', callback_data=f'watch_lesson_{lesson.id}')
    builder.button(text='üìñ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'homework_lesson_{lesson.id}')
    if lesson.resources:
        builder.button(text='üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', url=lesson.resources)
    else:
        builder.button(text='üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data=f'additional_materials_{lesson.id}')
    if callback.from_user.id in admins_ids or callback.from_user.id == config.ROOT_ADMIN:
        builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', callback_data=f'add_media_to_lesson_{lesson.id}')
        builder.button(text='üóë –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', callback_data=f'delete_media_from_lesson_{lesson.id}')
        builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞', callback_data=f'edit_lesson_name_{lesson.id}')
        if lesson.description:
            builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'add_lesson_description_{lesson.id}')
        else:
            builder.button(text='‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'add_lesson_description_{lesson.id}')
        builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data=f'add_resources_{lesson.id}')
        builder.button(text='üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data=f'delete_resources_{lesson.id}')
        builder.button(text='üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫', callback_data=f'm_delete_lesson_{lesson.id}')
    builder.button(text='üîô –í—ã–±–æ—Ä —É—Ä–æ–∫–∞', callback_data=f'select_module_{lesson.module.id}')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("edit_lesson_name_"))
async def edit_lesson_name(callback: CallbackQuery, state: FSMContext):
    lesson = await db_requests.get_lesson_by_id(callback.data[17:])
    await state.update_data(lesson=lesson)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    message_text = (f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞: <b>{lesson.title}</b>\n\n'
                    '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Ä–æ–∫—É.')
    await state.set_state(EditLessonName.waiting_for_text)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(EditLessonName.waiting_for_text))
async def new_lesson_name_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    upload_status = await db_requests.edit_lesson_name(lesson.id, message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    if upload_status:
        await message.answer(f'‚úÖ –ò–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("check_user_homework_"))
async def check_user_homework(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(answer_reply_markup='')
    user_homework = await db_requests.get_user_homework_by_id(callback.data[20:])
    
    user_homework_media_for_send = []
    for media in user_homework.media:
        if media.video_id:
            user_homework_media_for_send.append(types.InputMediaVideo(media=media.video_id))
        elif media.photo_id:
            user_homework_media_for_send.append(types.InputMediaPhoto(media=media.photo_id))
        elif media.text:
            await callback.message.answer(media.text)
    if len(user_homework_media_for_send) > 0:
        await bot.send_media_group(callback.from_user.id, user_homework_media_for_send)
    message_text = '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é —É—á–µ–Ω–∏–∫–∞'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚≠êÔ∏è', callback_data=f'grade_homework_{user_homework.id}.rate_1')
    builder.button(text='‚≠êÔ∏è‚≠êÔ∏è', callback_data=f'grade_homework_{user_homework.id}.rate_2')
    builder.button(text='‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', callback_data=f'grade_homework_{user_homework.id}.rate_3')
    builder.button(text='‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', callback_data=f'grade_homework_{user_homework.id}.rate_4')
    builder.button(text='‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è', callback_data=f'grade_homework_{user_homework.id}.rate_5')
    builder.adjust(1)
    await callback.message.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("grade_homework_"))
async def grade_homework(callback: CallbackQuery, state: FSMContext):
    callback_message = callback.data.split('.')
    user_homework = await db_requests.get_user_homework_by_id(callback_message[0][15:])
    rate = int(callback_message[1][5:])
    user = await db_requests.get_user_by_id(user_homework.user_id)
    lesson = await db_requests.get_lesson_by_id(user_homework.lesson_id)
    await db_requests.rate_user_homework(user_homework.id, rate)
    await state.update_data(user_homework=user_homework)
    await state.set_state(AddTeachersComment.waiting_for_text)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'cancel_from_')  
    try:
        user_message_text = f'‚ö†Ô∏è –ê–≤—Ç–æ—Ä –∫—É—Ä—Å–∞ –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É <b>{rate}</b> –≤–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∫ —É—Ä–æ–∫—É "{lesson.title}"!'
        await bot.send_message(user.user_telegram_id, user_message_text)
    except:
        pass
    
    await callback.message.edit_text(f'‚úÖ –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ {user.user_name} –∫ —É—Ä–æ–∫—É {lesson.title} –Ω–∞ {rate}.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —É—á–µ–Ω–∏–∫–∞.', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("homework_lesson_"))
async def homework_lesson(callback: CallbackQuery, state: FSMContext):
    homework = await db_requests.get_lesson_homework(callback.data[16:])
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    if not homework:
        if callback.from_user.id in admins_ids:
            await state.set_state(AddHomework.waiting_for_text)
            await state.update_data(lesson_id=callback.data[16:])
            message_text = '–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è <i>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>.'
            builder = InlineKeyboardBuilder()
            builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{callback.data[16:]}')
            await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
            return
        else:
            await callback.answer('ü§∑‚Äç‚ôÄÔ∏è –ö —ç—Ç–æ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è', show_alert=True)
            return
    else:
        user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
        user_homework = await db_requests.get_user_homework(user.id, callback.data[16:])
        message_text = f'–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ —É—Ä–æ–∫—É <b>{homework.lesson.title}</b>:\n\n' + homework.content
        if hasattr(user_homework, 'grade') and user_homework.grade:
            message_text += f'\n\nüåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫—É <b>{user_homework.grade}</b>.'
        if hasattr(user_homework, 'teachers_comment') and user_homework.teachers_comment:
            message_text += f'\n\nüìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫ –≤–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é:\n<b>{user_homework.teachers_comment}</b>.'
        builder = InlineKeyboardBuilder()
        if callback.from_user.id in admins_ids:
            builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è', callback_data=f'change_homework_{homework.id}')    
            if homework.user_homework_required:
                builder.button(text='‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data=f'edit_user_homework_required_{homework.id}')
            else:
                builder.button(text='‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data=f'edit_user_homework_required_{homework.id}')
        if homework.user_homework_required:
            builder.button(text='üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', callback_data=f'upload_user_homework_{homework.lesson.id}')
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{callback.data[16:]}')
        builder.adjust(1)
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("edit_user_homework_required_"))
async def homework_lesson(callback: CallbackQuery, state: FSMContext):
    homework = await db_requests.get_homework_by_id(callback.data[28:])
    await db_requests.edit_user_homework_required(homework.id)
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    builder = InlineKeyboardBuilder()
    if callback.from_user.id in admins_ids:
        builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è', callback_data=f'change_homework_{homework.id}')    
        if homework.user_homework_required:
            builder.button(text='‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data=f'edit_user_homework_required_{homework.id}')
        else:
            builder.button(text='‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è', callback_data=f'edit_user_homework_required_{homework.id}')
    if homework.user_homework_required:
        builder.button(text='üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', callback_data=f'upload_user_homework_{homework.lesson.id}')
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{homework.lesson.id}')
    builder.adjust(1)
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddHomework.waiting_for_text))
async def homework_text_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson_id = fsmdata.get('lesson_id')
    upload_status = await db_requests.add_homework_content(lesson_id, message.text)
    await state.set_state()
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson_id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç) –∫ —É—Ä–æ–∫—É', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç–∞) –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("add_media_to_lesson_"))
async def add_media_to_lesson(callback: CallbackQuery, state: FSMContext):
    lesson = await db_requests.get_lesson_by_id(callback.data[20:])
    await state.set_state(AddVideo.waiting_for_file)
    await state.update_data(lesson=lesson)
    message_text = ('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É—á–µ–Ω–∏–∫—É.\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n\n'
                    '<b>–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ /stop_upload –∏–ª–∏ "üîô –ö —É—Ä–æ–∫—É"</b>')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.video, StateFilter(AddVideo.waiting_for_file))
async def lesson_video_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    media_name = message.video.file_name.split('.') # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–æ —Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –æ—Ç—Å–µ—á—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    upload_status = await db_requests.add_media_to_lesson(message.video.file_id, lesson.id, media_name[0])
    
    if upload_status:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –≤–∏–¥–µ–æ <b>{media_name[0]}</b> –∫ —É—Ä–æ–∫—É.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ <b>{message.video.file_name}</b> –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.')
    

@router.message(Command('stop_upload'), StateFilter(AddVideo.waiting_for_file))
async def stop_upload(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–û–∫, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∏–¥–µ–æ –¥–ª—è —É—Ä–æ–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Ä–æ–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.')


@router.callback_query(F.data.startswith("upload_user_homework_"))
async def add_media_to_lesson(callback: CallbackQuery, state: FSMContext):
    user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
    user_homework = await db_requests.get_user_homework(user.id, callback.data[21:])
    if not user_homework:
        user_homework = await db_requests.add_user_homework(user.id, callback.data[21:])
        if user_homework:
            await state.set_state(AddUserHomework.waiting_for_media)
            await state.update_data(user_homework=user_homework)
            message_text = ('–ü—Ä–∏—à–ª–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n\n'
                            '–í—Å–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞ —Å–æ–æ–±—â–µ–Ω–∏—è) —á—Ç–æ –≤—ã –ø—Ä–∏—à–ª—ë—Ç–µ, —è –¥–æ–±–∞–≤–ª—é –≤ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n'
                            '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üîô –ö —É—Ä–æ–∫—É"')
            builder = InlineKeyboardBuilder()
            builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{callback.data[21:]}')
            await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        await state.set_state(AddUserHomework.waiting_for_media)
        await state.update_data(user_homework=user_homework)
        message_text = ('–ü—Ä–∏—à–ª–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n\n'
                        '–í—Å–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞ —Å–æ–æ–±—â–µ–Ω–∏—è) —á—Ç–æ –≤—ã –ø—Ä–∏—à–ª—ë—Ç–µ, —è –¥–æ–±–∞–≤–ª—é –≤ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n'
                        '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üîô –ö —É—Ä–æ–∫—É"')
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{callback.data[21:]}')
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.video, StateFilter(AddUserHomework.waiting_for_media))
async def user_homework_video_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    user_homework = fsmdata.get('user_homework')
    upload_status = await db_requests.add_user_homework_media(user_homework.id, video_id=message.video.file_id)
    if upload_status:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{user_homework.lesson_id}')
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –≤–∏–¥–µ–æ –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–µ—Ä–Ω—É–≤—à–∏—Å—å –∫ —É—Ä–æ–∫—É.', reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{user_homework.lesson_id}')
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–∞.', reply_markup=builder.as_markup())


@router.message(F.photo, StateFilter(AddUserHomework.waiting_for_media))
async def user_homework_photo_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    user_homework = fsmdata.get('user_homework')
    upload_status = await db_requests.add_user_homework_media(user_homework.id, photo_id=message.photo[-1].file_id)
    if upload_status:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{user_homework.lesson_id}')
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–µ—Ä–Ω—É–≤—à–∏—Å—å –∫ —É—Ä–æ–∫—É.', reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{user_homework.lesson_id}')
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–∞.', reply_markup=builder.as_markup())

    
@router.message(F.text, StateFilter(AddUserHomework.waiting_for_media))
async def user_homework_text_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    user_homework = fsmdata.get('user_homework')
    upload_status = await db_requests.add_user_homework_media(user_homework.id, text=message.text)
    if upload_status:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{user_homework.lesson_id}')
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–µ—Ä–Ω—É–≤—à–∏—Å—å –∫ —É—Ä–æ–∫—É.', reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{user_homework.lesson_id}')
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–∞.', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("watch_lesson_"))
async def add_media_to_lesson(callback: CallbackQuery, state: FSMContext):
    lesson = await db_requests.get_lesson_by_id(callback.data[13:])
    lesson_media = await db_requests.get_lesson_media(lesson.id)
    
    if len(lesson_media) == 0:
        await callback.answer('–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ ü§î', show_alert=True)
        return
    
    for media in lesson_media:
        await callback.message.answer_video(video=media.media_id, caption=media.media_name, protect_content=True)
    
    await callback.message.edit_reply_markup(answer_reply_markup='')
    message_text = '–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?'
    builder = InlineKeyboardBuilder()
    builder.button(text='üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data=f'additional_materials_{lesson.id}')
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    builder.adjust(1)
    await callback.message.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("add_resources_"))
async def add_resources_link(callback: CallbackQuery, state: FSMContext):
    lesson = await db_requests.get_lesson_by_id(callback.data[14:])
    await state.set_state(AddAdditionalMaterials.waiting_for_media)
    await state.update_data(lesson=lesson)
    message_text = ('–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "üîô –ö —É—Ä–æ–∫—É"')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddAdditionalMaterials.waiting_for_media))
async def lesson_additional_text_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    upload_status = await db_requests.add_additional_materials(lesson.id, text=message.text)
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É {lesson.title}.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    


@router.message(F.video, StateFilter(AddAdditionalMaterials.waiting_for_media))
async def lesson_additional_video_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    upload_status = await db_requests.add_additional_materials(lesson.id, video_id=message.video.file_id)
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –≤–∏–¥–µ–æ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É {lesson.title}.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    


@router.message(F.photo, StateFilter(AddAdditionalMaterials.waiting_for_media))
async def lesson_additional_photo_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    upload_status = await db_requests.add_additional_materials(lesson.id, photo_id=message.photo[-1].file_id)
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É {lesson.title}.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    
    

@router.callback_query(F.data.startswith("additional_materials_"))
async def additional_materials(callback: CallbackQuery, state: FSMContext):
    lesson = await db_requests.get_lesson_by_id(callback.data[21:])
    
    if not lesson.additional_materials:
        await callback.answer('üôÖ‚Äç‚ôÄÔ∏è –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.', show_alert=True)
        return
    await callback.message.delete()
    media_for_send = []
    for media in lesson.additional_materials:
        if media.video_id:
            media_for_send.append(types.InputMediaVideo(media=media.video_id))
        elif media.photo_id:
            media_for_send.append(types.InputMediaPhoto(media=media.photo_id))
        elif media.text:
            await callback.message.answer(media.text)
    if len(media_for_send) > 0:
        await bot.send_media_group(callback.from_user.id, media_for_send)
    message_text = '–≠—Ç–æ –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É?'
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    await callback.message.answer(message_text, reply_markup=builder.as_markup())
    

@router.callback_query(F.data.startswith("add_lesson_description_"))
async def add_lesson_description(callback: CallbackQuery, state: FSMContext):
    lesson = await db_requests.get_lesson_by_id(callback.data[23:])
    await state.update_data(lesson=lesson)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    if lesson.description:
        message_text = (f'–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞ <b>{lesson.title}</b>:\n\n'
                        f'"{lesson.description}"\n\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Ä–æ–∫—É.')
    else:
        message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —É—Ä–æ–∫—É.'
    await state.set_state(AddLessonDescription.waiting_for_text)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddLessonDescription.waiting_for_text))
async def lesson_resources_link_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    if len(message.text) < 2500:
        description_text = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∫ —É—Ä–æ–∫—É —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–î–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å https://pr-cy.ru/textlength/', reply_markup=builder.as_markup())
        return
    
    upload_status = await db_requests.add_description_for_lesson(lesson.id, description_text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —É—Ä–æ–∫—É.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("delete_media_from_lesson_"))
async def delete_media_from_lesson(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    lesson = await db_requests.get_lesson_by_id(callback.data[25:])
    lesson_media = await db_requests.get_lesson_media(lesson.id)
    await state.update_data(lesson=lesson)
    message_text = ('–ü–æ–¥ –∫–∞–∂–¥—ã–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º —É–∫–∞–∑–∞–Ω –µ–≥–æ ID.\n'
                    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º ID, —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Ä–æ–∫—É.')
    builder = InlineKeyboardBuilder()
    await state.set_state(DeleteLessonMedia.waiting_for_id)
    for media in lesson_media:
        await callback.message.answer_video(video=media.media_id, caption=f'<b>ID —Ñ–∞–π–ª–∞ - {media.id}</b>')
        builder.button(text=f'{media.id}', callback_data=f'delete_media_{media.id}')
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    builder.adjust(4)
    await callback.message.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("delete_media_"), StateFilter(DeleteLessonMedia.waiting_for_id))
async def delete_media(callback: CallbackQuery, state: FSMContext):
    delete_status = await db_requests.delete_media_from_lesson(callback.data[13:])
    if not delete_status:
        await callback.message.edit_text('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')
    builder = InlineKeyboardBuilder()
    fsmdata = await state.get_data()
    lesson = fsmdata.get('lesson')
    lesson_media = await db_requests.get_lesson_media(lesson.id)
    for media in lesson_media:
        builder.button(text=f'{media.id}', callback_data=f'delete_media_{media.id}')
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{lesson.id}')
    builder.adjust(4)
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("change_homework_"))
async def add_media_to_lesson(callback: CallbackQuery, state: FSMContext):
    homework = await db_requests.get_homework_by_id(callback.data[16:])
    await state.set_state(EditHomework.waiting_for_text)
    await state.update_data(homework=homework)
    message_text = ('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{homework.lesson.id}')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(EditHomework.waiting_for_text))
async def lesson_video_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    homework = fsmdata.get('homework')
    new_homework = await db_requests.edit_homework_content(homework.id, message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö —É—Ä–æ–∫—É', callback_data=f'select_lesson_{homework.lesson.id}')
    await message.answer(f'‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É {homework.lesson.title}:\n{new_homework.content}', reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddTeachersComment.waiting_for_text))
async def teachers_comemnt_recieved(message: Message, state: FSMContext):
    await state.update_data(teachers_comment=message.text)
    message_text = ('–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —É—á–µ–Ω–∏–∫–∞:\n\n'
                    f'<b>{message.text}</b>\n\n'
                    '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å? –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è - –ø—Ä–æ—Å—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.')
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'add_teachers_comment_to_user_homework')
    builder.button(text='‚ùå –ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'cancel_from_')  
    builder.adjust(1)
    await message.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "add_teachers_comment_to_user_homework")
async def add_teachers_comment_to_user_homework(callback: CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    user_homework = fsmdata.get('user_homework')
    user = await db_requests.get_user_by_id(user_homework.user_id)
    lesson = await db_requests.get_lesson_by_id(user_homework.lesson_id)
    teachers_comment = fsmdata.get('teachers_comment')
    message_for_user = f'–ê–≤—Ç–æ—Ä –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∫ —É—Ä–æ–∫—É <b>{lesson.title}</b>'
    await db_requests.add_teachers_comment(user_homework.id, teachers_comment)
    await state.clear()
    await bot.send_message(user.user_telegram_id, message_for_user)
    await callback.message.edit_text('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —É—á–µ–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω')