from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters.command import Command
from aiogram import F
import db_requests
from aiogram import Router
from aiogram.fsm.context import FSMContext
import datetime
from bot_init import bot
import config
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from handlers.menu import courses
from handlers.course import check_course_availability
import asyncio



router = Router()  


@router.message(Command('start'))
async def start(message: types.Message, state: FSMContext):
    user = await db_requests.get_user_by_telegram_id(message.from_user.id)
    bot_settings = await db_requests.get_bot_settings()
    admins = await db_requests.get_admins()
    if not user:
        user_id = await db_requests.add_new_user(message.from_user.id, message.from_user.full_name, datetime.datetime.utcnow())
        if not user_id:
            await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            try:
                await bot.send_message(config.ROOT_ADMIN, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            except:
                pass
            for admin in admins:
                try:
                    await bot.send_message(admin.user_telegram_id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.')
                except:
                    pass # –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, —Ç.–∫. –∞–¥–º–∏–Ω —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            return
    if bot_settings:
        if bot_settings.welcome_message:
            await message.answer(bot_settings.welcome_message)
        else:
            await message.answer(config.WELCOME_MESSAGE_EXAMPLE)
    else:
        await message.answer('–ü—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ /initialization')
    if bot_settings.welcome_video_id:
        await message.answer_video(bot_settings.welcome_video_id)
    await courses(message, state)


@router.message(F.new_chat_members)
async def add_bot_to_chat(message: types.Message, state: FSMContext):
    bot_obj = await bot.get_me()
    builder = InlineKeyboardBuilder()
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]

    for chat_member in message.new_chat_members:
        if chat_member.id == bot_obj.id:
            if message.from_user.id not in admins_ids:
                await message.answer('–¢–æ–ª—å–∫–æ –º–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—ã. –ü–æ–∫–∞ üëã')
                await bot.leave_chat(message.chat.id)
            else:          
                message_text = ('–ü—Ä–∏–≤–µ—Ç! üëã\n'
                                '–ß—Ç–æ–±—ã —è –º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç —á–∞—Ç –≤ –∫—É—Ä—Å, –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
                builder.button(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=f'check_bot_for_admin')
                await message.answer(message_text, reply_markup=builder.as_markup())
        else:
            user = await db_requests.get_user_by_telegram_id(chat_member.id)
            course = await db_requests.get_course_by_chat_id(message.chat.id)
            if await check_course_availability(user.id, course.id) or chat_member.id in admins_ids:
                message_text = (f'{chat_member.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —É—á–µ–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞ <b>"{course.title}"</b>!\n\n'
                                '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏. –ê –¥—Ä—É–≥–∏–µ —É—á–µ–Ω–∏–∫–∏ –∏ –∞–≤—Ç–æ—Ä –∫—É—Ä—Å–∞ –ø–æ–º–æ–≥—É—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂—É—Ç –≤–∞—Å ü§ó')
                await message.answer(message_text)
                return
            message_text = f'{chat_member.full_name} –ø—Ä–æ—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –∫—É–ø–∏—Ç—å –∫—É—Ä—Å.\n–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ üëã'
            await message.answer(message_text)
            await asyncio.sleep(3)
            await bot.ban_chat_member(message.chat.id, chat_member.id)
            try:
                await bot.unban_chat_member(message.chat.id, chat_member.id)
            except:
                pass

@router.callback_query(F.data == "check_bot_for_admin")
async def check_bot_for_admin(callback: CallbackQuery, state: FSMContext):
    chat_admins = await bot.get_chat_administrators(callback.message.chat.id)
    builder = InlineKeyboardBuilder()
    bot_admin = False
    for admin in chat_admins:
        if admin.user.id == bot.id:
            bot_admin = True
            await callback.message.edit_reply_markup(answer_reply_markup='')
            courses = await db_requests.get_all_courses(for_admin=True)
            message_text = ('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç.\n\n'
                            '‚ö†Ô∏è –ï—Å–ª–∏ –∫ –∫—É—Ä—Å—É —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –¥—Ä—É–≥–æ–π —á–∞—Ç, —è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∂—É –∏ –¥–æ–±–∞–≤–ª—é –∫ –∫—É—Ä—Å—É –≠–¢–û–¢ —á–∞—Ç.\n\n'
                            '–ù–µ —É–¥–∞–ª—è–π—Ç–µ –º–µ–Ω—è –∏–∑ –≥—Ä—É–ø–ø—ã, —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —á—Ç–æ–±—ã —É –≤—Å—Ç—É–ø–∏–≤—à–∏—Ö –≤ –≥—Ä—É–ø–ø—É –±—ã–ª –∫—É–ø–ª–µ–Ω —ç—Ç–æ—Ç –∫—É—Ä—Å. –ï—Å–ª–∏ –Ω–µ—Ç, —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –µ–≥–æ –∏–∑ –≥—Ä—É–ø–ø—ã.')
            for course in courses:
                builder.button(text=course.title, callback_data=f'set_chat_link_for_course_{course.id}')
            builder.adjust(1)
            await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    if not bot_admin:
        message_text = '–£ –º–µ–Ω—è –≤—Å—ë –µ—â—ë –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        await callback.answer(message_text, show_alert=True)
        return


@router.callback_query(F.data.startswith("set_chat_link_for_course_"))
async def set_chat_link_for_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(answer_reply_markup='')
    course = await db_requests.get_course_by_id(callback.data[25:])
    invite_link: str = await bot.export_chat_invite_link(callback.message.chat.id)
    invite_id = invite_link.split('+')
    await db_requests.set_course_chat_link(course.id, invite_id[1], callback.message.chat.id)
    message_text = ('üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤ –∫—É—Ä—Å–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n\n'
                    '–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "üí¨ –ß–∞—Ç –∫—É—Ä—Å–∞" –≤ –º–µ–Ω—é –∫—É—Ä—Å–∞.\n\n'
                    f'–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –∏–º —ç—Ç—É —Å—Å—ã–ª–∫—É: {invite_link}\n'
                    '‚ö†Ô∏è –ù–µ —É–¥–∞–ª—è–π—Ç–µ –º–µ–Ω—è –∏–∑ –≥—Ä—É–ø–ø—ã! –ò–Ω–∞—á–µ —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.')
    await callback.message.answer(message_text)


@router.message(Command('my_id'))
async def get_chat_id(message: Message):
    await message.answer(f'You telegram id: {message.from_user.id}')


@router.message(Command('group_id'))
async def get_chat_id(message: Message):
    await message.answer(f'Group id: {message.chat.id}')