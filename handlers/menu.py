import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import db_requests
from aiogram.fsm.context import FSMContext
from bot_init import bot
import json
from aiogram import types
import config


router = Router()  

@router.callback_query(F.data == "courses")
@router.message(Command("courses")) 
async def courses(message: Message, state: FSMContext):
    await state.clear()
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    if hasattr(message, 'chat') and message.chat.type != 'private':
        await message.answer('–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö')
        return
    builder = InlineKeyboardBuilder()
    if message.from_user.id in admins_ids:
        course_list = await db_requests.get_all_courses(for_admin=True)
    else:
        course_list = await db_requests.get_all_courses()
    hidden_courses = False

    for course in course_list:
        if not course.available:
            builder.button(text=f'‚ö†Ô∏è {course.title}', callback_data=f'select_course_{course.id}')
            hidden_courses = True
        else:
            builder.button(text=course.title, callback_data=f'select_course_{course.id}')
    if message.from_user.id in admins_ids or message.from_user.id == config.ROOT_ADMIN:  
        builder.button(text='‚ûï –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å', callback_data='add_new_course')
        builder.button(text='üìí –ê–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    builder.adjust(1)
    
    if len(course_list) > 0:
        message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å.\n\n'
        if message.from_user.id in admins_ids:
            if hidden_courses:
                message_text += '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—É—Ä—Å—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'
    else:
        message_text = '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.'
    builder.adjust(1)

    try:
        await message.message.edit_text(message_text, reply_markup=builder.as_markup())
    except:
        await message.answer(message_text, reply_markup=builder.as_markup())


@router.message(Command("contact_us")) 
async def contact_us(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    bot_settings = await db_requests.get_bot_settings()
    if bot_settings.author_telegram:
        builder.button(text='Telegram', url=bot_settings.author_telegram)
    if bot_settings.author_instagram:
        builder.button(text='Instagram', url=bot_settings.author_instagram)
    if bot_settings.author_vk:
        builder.button(text='VK', url=bot_settings.author_vk)
    if bot_settings.author_telegram_public:
        builder.button(text='–ì—Ä—É–ø–ø–∞ –≤ Telegram', url=bot_settings.author_telegram_public)
    if bot_settings.author_vk_public:
        builder.button(text='–ì—Ä—É–ø–ø–∞ –≤ VK', url=bot_settings.author_vk_public)
    builder.adjust(1)
    if bot_settings.author_phone_number:
        message_text = f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {bot_settings.author_phone_number} –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∏–∂–µ.'
    else:
        if bot_settings.author_telegram or bot_settings.author_instagram or bot_settings.author_vk or bot_settings.author_telegram_public or bot_settings.author_vk_public:
            message_text = f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∏–∂–µ.'
        else:
            message_text = f'‚õîÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã!'
    await message.answer(message_text, reply_markup=builder.as_markup())
    
    