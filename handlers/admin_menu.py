import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import db_requests
from aiogram.fsm.context import FSMContext
from bot_init import bot
import json
from aiogram import types
import config
from states.add_new_course import AddCourse, AddModule, AddLesson
from states.send_message_to_all_users import SendMessageToAllUsers

from aiogram.filters import StateFilter


router = Router()  

@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text='üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='get_all_users')
    builder.button(text='üìä –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤', callback_data='get_all_orders')
    builder.button(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data='bot_settings')
    builder.button(text='üîô –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤', callback_data='courses')
    builder.adjust(1)
    message_text = '–í—ã –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é.'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "add_new_course")
async def add_new_course(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddCourse.title)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    message_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞.'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(AddCourse.title))
async def course_title_recieved(message: Message, state: FSMContext):
    if len(message.text) < 50:
        course_title = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å.', reply_markup=builder.as_markup())
        return
    await state.set_state()
    course_id = await db_requests.add_new_course(course_title)
    if course_id:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å –Ω–∞ –∫—É—Ä—Å', callback_data=f'add_new_module_to_{course_id}')
        builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
        builder.adjust(1)
        await message.answer('‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')


@router.callback_query(F.data.startswith("add_new_module_to_"))
async def add_new_course(callback: CallbackQuery, state: FSMContext):
    course_id = callback.data[18:]
    course = await db_requests.get_course_by_id(course_id)
    await state.update_data(course_id=course_id)
    await state.set_state(AddModule.title)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'select_course_{course.id}')
    message_text = (f'–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –≤ –∫—É—Ä—Å <b>{course.title}</b>\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–¥—É–ª—è.')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(AddModule.title))
async def course_title_recieved(message: Message, state: FSMContext):
    if len(message.text) < 80:
        module_title = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å.', reply_markup=builder.as_markup())
        return
    await state.set_state()
    fsmdata = await state.get_data()
    course_id = fsmdata.get('course_id')
    module_id = await db_requests.add_new_module(course_id, module_title)
    if module_id:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ –º–æ–¥—É–ª—å', callback_data=f'add_new_lesson_to_{module_id}')
        builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É', callback_data=f'select_course_{course_id}')
        builder.adjust(1)
        await message.answer('‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')


@router.callback_query(F.data.startswith("add_new_lesson_to_"))
async def add_new_lesson(callback: CallbackQuery, state: FSMContext):
    module_id = callback.data[18:]
    module = await db_requests.get_module_by_id(module_id)
    await state.update_data(module_id=module_id)
    await state.set_state(AddLesson.title)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'select_module_{module_id}')
    message_text = (f'–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–∫ –≤ –º–æ–¥—É–ª—å <b>{module.title}</b>\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞.')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(AddLesson.title))
async def lesson_title_recieved(message: Message, state: FSMContext):
    if len(message.text) < 50:
        lesson_title = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å.', reply_markup=builder.as_markup())
        return
    await state.set_state()
    fsmdata = await state.get_data()
    module_id = fsmdata.get('module_id')
    lesson_id = await db_requests.add_new_lesson(module_id, lesson_title)
    if module_id:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é', callback_data=f'select_module_{module_id}')
        builder.adjust(1)
        await message.answer('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')


@router.callback_query(F.data.startswith("m_delete_"))
async def delete(callback: CallbackQuery, state: FSMContext):
    type = callback.data[9:15]
    item_id = callback.data[16:]
    translate = {'course': '–∫—É—Ä—Å', 'module': '–º–æ–¥—É–ª—å', 'lesson': '—É—Ä–æ–∫'}
    if type == 'course':
        item = await db_requests.get_course_by_id(item_id)
    elif type == 'module':
        item = await db_requests.get_module_by_id(item_id)
    elif type == 'lesson':
        item = await db_requests.get_lesson_by_id(item_id)
    
    await state.update_data(type=type, item_id=item_id)
    message_text = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {translate.get(type)} <b>"{item.title}"</b>?'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –î–∞', callback_data='confirm_delete')
    builder.button(text='‚ùå –ù–ï–¢!', callback_data=f'select_{type}_{item_id}')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    type = fsmdata.get('type')
    item_id = fsmdata.get('item_id')
    builder = InlineKeyboardBuilder()
    
    if type == 'course':
        builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
        result = await db_requests.delete_course(item_id)
    elif type == 'module':
        module = await db_requests.get_module_by_id(item_id)
        course = await db_requests.get_course_by_id(module.course.id)
        builder.button(text='üîô –í—ã–±–æ—Ä –º–æ–¥—É–ª—è', callback_data=f'select_course_{course.id}')
        result = await db_requests.delete_module(item_id)
    elif type == 'lesson':
        lesson = await db_requests.get_lesson_by_id(item_id)
        module = await db_requests.get_module_by_id(lesson.module.id)
        builder.button(text='üîô –í—ã–±–æ—Ä —É—Ä–æ–∫–∞', callback_data=f'select_module_{module.id}')
        result = await db_requests.delete_lesson(item_id)

    if result:
        await callback.message.edit_text('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.', reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.', reply_markup=builder.as_markup())
        
    
@router.callback_query(F.data == "get_all_users")
async def get_all_users(callback: CallbackQuery, state: FSMContext):
    all_users = await db_requests.get_all_users()
    message_text = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ê–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    
    for id, user in enumerate(all_users):
        message_text += f'{id+1}) {user.user_name}\n'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "get_all_orders")
async def get_all_orders(callback: CallbackQuery, state: FSMContext):
    orders = await db_requests.get_all_orders()
    message_text = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n'
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ê–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    
    for id, order in enumerate(orders):
        message_text += (f'{id+1}) {order.user.user_name} –∑–∞–∫–∞–∑–∞–ª "{order.course.title}" {order.order_date}. –û–ø–ª–∞—Ç–∞: {"‚úÖ" if order.paid else "‚ùå"}\n\n')

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("admin_send_message_to_all_users_course_"))
async def admin_send_message_to_all_users(callback: CallbackQuery, state: FSMContext):
    course = await db_requests.get_course_by_id(callback.data[39:])
    await state.update_data(course=course)
    await state.set_state(SendMessageToAllUsers.text)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —É—á–µ–Ω–∏–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(SendMessageToAllUsers.text))
async def text_message_recieved(message: Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='confirm_send_message_to_users')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    builder.adjust(1)
    await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç.\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∞"\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç')
    await message.answer(message.text, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'confirm_send_message_to_users', StateFilter(SendMessageToAllUsers.text))
async def confirm_send_message_to_users(callback: CallbackQuery, state: FSMContext):
    await state.set_state()
    await callback.message.delete()
    fsmdata = await state.get_data()
    course = fsmdata.get('course')
    message_text = fsmdata.get('message_text')
    users_count = 0
    for user in course.users:
        user = await db_requests.get_user_by_id(user.user_id)
        try:
            await bot.send_message(user.user_telegram_id, message_text)
            users_count += 1
        except:
            pass
    await callback.message.answer(f'{users_count} —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.')


'''@router.message(F.video)
async def lesson_additional_video_recieved(message: Message):
    print(message.video.file_id)'''


@router.message(Command("initialization")) 
async def initialization(message: Message, state: FSMContext):
    bot_settings = await db_requests.get_bot_settings()
    if not bot_settings:
        await db_requests.init_bot_settings(message.from_user.id, message.from_user.full_name)
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.\n–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.')
        await message.answer(config.welcome_message_example)