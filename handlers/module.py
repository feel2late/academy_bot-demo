import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import db_requests
from aiogram.fsm.context import FSMContext
from bot_init import bot
import json
from aiogram import types
import config
from states.add_description import AddModuleDescription
from states.set_module_duration import SetModuleDuration
from states.edit_name import EditModuleName
from aiogram.filters import StateFilter


router = Router()  


@router.callback_query(F.data.startswith("select_module_"))
async def select_module(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    module = await db_requests.get_module_by_id(callback.data[14:])
    builder = InlineKeyboardBuilder()
    lessons = await db_requests.get_lessons_by_module_id(module.id)
    user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
    date_added_course = await db_requests.get_date_added_course_to_user(user.id, module.course.id)
    modules_in_course = await db_requests.get_course_modules(module.course.id)
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    offset = 0

    for module_in_course in modules_in_course:
        if module_in_course.title != module.title:
            offset += module_in_course.duration
        else:
            break
    if callback.from_user.id in admins_ids or callback.from_user.id == config.ROOT_ADMIN or (datetime.datetime.utcnow() - date_added_course).total_seconds() / 60 / 60 >= offset:
        for id, lesson in enumerate(lessons):
            builder.button(text=f'{id+1}. {lesson.title}', callback_data=f'select_lesson_{lesson.id}')
        if callback.from_user.id in admins_ids or callback.from_user.id == config.ROOT_ADMIN:
            builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫', callback_data=f'add_new_lesson_to_{module.id}')
            builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è', callback_data=f'edit_module_name_{module.id}')
            if module.description:
                builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'add_module_description_{module.id}')
            else:
                builder.button(text='‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'add_module_description_{module.id}')
            builder.button(text=f'‚è± –î–µ–¥–ª–∞–π–Ω ({module.duration} —á.)', callback_data=f'set_module_duration_{module.id}')
            builder.button(text='üóë –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å', callback_data=f'm_delete_module_{module.id}')
        builder.button(text='üîô –í—ã–±–æ—Ä –º–æ–¥—É–ª—è', callback_data=f'select_course_{module.course.id}')
        builder.adjust(1)
        message_text = f'üëâüèª –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥—É–ª—å <b>{module.title}</b> –≤ –∫—É—Ä—Å–µ <b>{module.course.title}</b>.\n\n'
        if module.description:
            message_text += f'{module.description}\n\n'
        message_text += '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.'
    else:
        opened_date = date_added_course + datetime.timedelta(hours=offset+3)
        message_text = f'–£–ø—Å! ü´£\n–ú–æ–¥—É–ª—å {module.title} –≤–∞–º –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ <b>{datetime.datetime.strftime(opened_date, "%H:%M %d.%m.%y")} –ú–°–ö.</b>'
        builder.button(text='üîô –í—ã–±–æ—Ä –º–æ–¥—É–ª—è', callback_data=f'select_course_{module.course.id}')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("edit_module_name_"))
async def edit_module_name(callback: CallbackQuery, state: FSMContext):
    module = await db_requests.get_module_by_id(callback.data[17:])
    await state.update_data(module=module)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
    message_text = (f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: <b>{module.title}</b>\n\n'
                    '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–æ–¥—É–ª—é.')
    await state.set_state(EditModuleName.waiting_for_text)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(EditModuleName.waiting_for_text))
async def new_module_name_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    module = fsmdata.get('module')
    upload_status = await db_requests.edit_module_name(module.id, message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
    if upload_status:
        await message.answer(f'‚úÖ –ò–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("add_module_description_"))
async def add_module_description(callback: CallbackQuery, state: FSMContext):
    module = await db_requests.get_module_by_id(callback.data[23:])
    await state.update_data(module=module)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
    if module.description:
        message_text = (f'–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞ <b>{module.title}</b>:\n\n'
                        f'"{module.description}"\n\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–æ–¥—É–ª—é.')
    else:
        message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–æ–¥—É–ª—é.'
    await state.set_state(AddModuleDescription.waiting_for_text)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddModuleDescription.waiting_for_text))
async def lesson_resources_link_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    module = fsmdata.get('module')
    if len(message.text) < 2500:
        description_text = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∫ —É—Ä–æ–∫—É —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–î–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å https://pr-cy.ru/textlength/', reply_markup=builder.as_markup())
        return
    
    upload_status = await db_requests.add_description_for_module(module.id, description_text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–æ–¥—É–ª—é.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("set_module_duration_"))
async def set_module_offset(callback: CallbackQuery, state: FSMContext):
    module = await db_requests.get_module_by_id(callback.data[20:])
    await state.update_data(module=module)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
    if module.duration != 0:
        message_text = (f'–¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è <b>{module.duration}</b> —á–∞—Å–æ–≤.\n\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å <b>–≤ —á–∞—Å–∞—Ö</b> –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–æ–¥—É–ª—é.')
    else:
        message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è <b>–≤ —á–∞—Å–∞—Ö</b>.'
    await state.set_state(SetModuleDuration.waiting_for_new_time)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(SetModuleDuration.waiting_for_new_time))
async def module_duration_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    module = fsmdata.get('module')
    if message.text.isdigit():
        duration = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
        await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ —á–∞—Å–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.', reply_markup=builder.as_markup())
        return
    
    upload_status = await db_requests.set_module_duration(module.id, duration)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –º–æ–¥—É–ª—é', callback_data=f'select_module_{module.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()
