import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import db_requests
from aiogram.fsm.context import FSMContext
from bot_init import bot
import json
from aiogram import types
import config
from aiogram.filters import StateFilter
from states.add_description import AddCourseDescription
from states.edit_name import EditCourseName
from states.add_price_for_course import AddPriceForCourse
from payment.generate_payment_link import generate_payment_link
from handlers.menu import courses


router = Router()  

async def is_course_available_to_user(user_id: int, target_course_id: int) -> bool:
    available_courses = await db_requests.get_courses_available_to_user(user_id)
    for user_course in available_courses:
        if user_course.course_id == target_course_id:
            return True
    return False


async def check_course_availability(user_id: int, course_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = await db_requests.get_user_by_id(user_id)
    courses_available_to_user = await db_requests.get_purchased_courses(user.id)
    for available_course in courses_available_to_user:
        if available_course.course_id and int(available_course.course_id) == int(course_id):
            return True
    return False


@router.callback_query(F.data.startswith("select_course_"))
async def select_course(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    course = await db_requests.get_course_by_id(callback.data[14:])
    user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    offset = 0
    builder = InlineKeyboardBuilder()
    

    if await is_course_available_to_user(user.id, course.id) or callback.from_user.id in admins_ids or callback.from_user.id == config.ROOT_ADMIN:
        modules = await db_requests.get_course_modules(course.id)

        for id, module in enumerate(modules):
            for module_in_course in modules:
                if module_in_course.title != module.title:
                    offset += module_in_course.duration
                else:
                    break
            if callback.from_user.id in admins_ids or callback.from_user.id == config.ROOT_ADMIN:
                builder.button(text=f'{id + 1}. {module.title}', callback_data=f'select_module_{module.id}')
            else:
                date_added_course = await db_requests.get_date_added_course_to_user(user.id, module.course.id)
                opened_date = date_added_course + datetime.timedelta(hours=offset+3)
                if opened_date > datetime.datetime.utcnow():
                    builder.button(text=f'üîí –¥–æ {datetime.datetime.strftime(opened_date, "%d.%m")} | {id + 1}. {module.title}', callback_data=f'select_module_{module.id}')
                else:
                    builder.button(text=f'{id + 1}. {module.title}', callback_data=f'select_module_{module.id}')
        if course.chat_link:
            builder.button(text='üí¨ –ß–∞—Ç –∫—É—Ä—Å–∞', url=f'tg://join?invite={course.chat_link}')
        else:
            builder.button(text='üí¨ –ß–∞—Ç –∫—É—Ä—Å–∞', callback_data='no_course_chat')
        if callback.from_user.id in admins_ids or callback.from_user.id == config.ROOT_ADMIN:
            builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å', callback_data=f'add_new_module_to_{course.id}')
            builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞', callback_data=f'edit_course_name_{course.id}')
            if course.description:
                builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞', callback_data=f'add_course_description_{course.id}')
            else:
                builder.button(text='‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞', callback_data=f'add_course_description_{course.id}')
            if course.price:
                builder.button(text='üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞', callback_data=f'add_course_price_{course.id}')
            else:
                builder.button(text='üí≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞', callback_data=f'add_course_price_{course.id}')
            if course.available:
                builder.button(text='‚úÖ –ö—É—Ä—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', callback_data=f'change_course_available_{course.id}')
            else:
                builder.button(text='‚ùå –ö—É—Ä—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', callback_data=f'change_course_available_{course.id}')
            builder.button(text='üì® –†–∞—Å—Å—ã–ª–∫–∞ —É—á–µ–Ω–∏–∫–∞–º –∫—É—Ä—Å–∞', callback_data=f'admin_send_message_to_all_users_course_{course.id}')
            builder.button(text='üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å', callback_data=f'm_delete_course_{course.id}')
        builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
        builder.adjust(1)
        message_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å <b>{course.title}</b>.\n\n'
        if course.description:
            message_text += f'{course.description}\n\n'
        message_text += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å.'

    else:
        message_text = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å <b>{course.title}</b>\n\n')
        if course.description:
            message_text += f'{course.description}\n\n'
        if course.price == 0:
            message_text += f'–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º!'
            builder.button(text='üÜì –û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å', callback_data=f'buy_course_{course.id}')
        else:
            message_text += f'–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ–≥–æ –∑–∞ <b>{course.price} —Ä—É–±–ª–µ–π!</b>'
            builder.button(text='üõç –ö—É–ø–∏—Ç—å –∫—É—Ä—Å', callback_data=f'buy_course_{course.id}')
        builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
        builder.adjust(1)

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "no_course_chat")
async def no_course_chat(callback: CallbackQuery):
    await callback.answer('–î–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω —á–∞—Ç', show_alert=True)


@router.callback_query(F.data.startswith("buy_course_"))
async def buy_course(callback: CallbackQuery, state: FSMContext):
    user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
    course = await db_requests.get_course_by_id(callback.data[11:])
    if not user.phone_number:
        await callback.message.delete()
        await state.update_data(course=course)
        if course.price == 0:
            message_text = '–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫—É—Ä—Å–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä\"'
        else:
            message_text = '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä\"'
        builder = ReplyKeyboardBuilder()
        builder.row(types.KeyboardButton(text="‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä.", request_contact=True))
        await callback.message.answer(message_text, reply_markup=builder.as_markup(resize_keyboard=True))
        return
    else:
        if course.price == 0:
            builder = InlineKeyboardBuilder()
            builder.button(text='üî• –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É!', callback_data=f'select_course_{course.id}')
            now = datetime.datetime.utcnow()
            await db_requests.add_course_to_user(user.id, course.id, now)
            await callback.message.edit_text(f'–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å <b>{course.title}</b>!', reply_markup=builder.as_markup())
            return
        if not config.SECRET_PRODAMUS_KEY:
            if config.DEMO:
                user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
                now = datetime.datetime.utcnow()
                user_message_text = (f'‚úÖ –î–ª—è –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É <b>{course.title}</b> –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ.\n'
                                    f'–°–∫–æ—Ä–µ–π –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –±–æ—Ç–∞!')
                await db_requests.add_course_to_user(user.id, course.id, now)
                builder = InlineKeyboardBuilder()
                builder.button(text='üî• –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É!', callback_data=f'select_course_{course.id}')
                await callback.message.edit_text(user_message_text, reply_markup=builder.as_markup())
                return
            else:   
                builder = InlineKeyboardBuilder()
                builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
                message_text = '‚õîÔ∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∫–∞ —á—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å –Ω–µ–ª—å–∑—è.'
                await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
                return
        order_id = await db_requests.create_order(course.id, user.id)
        payment_link = await generate_payment_link(order_id, user.phone_number, course.id)
        message_text = (f'–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É <b>{course.title}</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø".\n'
                        '‚Ü™Ô∏è –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n\n'
                        '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.\n\n'
                        '‚è± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
        builder = InlineKeyboardBuilder()
        builder.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', url=payment_link)
        builder.button(text='üí± –û–ø–ª–∞—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä—É', callback_data=f'direct_payment_{course.id}')
        builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
        builder.adjust(1)
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.contact)
async def on_user_shared(message: types.Message, state: FSMContext):
    if message.from_user.id == message.contact.user_id:
        user = await db_requests.get_user_by_telegram_id(message.from_user.id)
        fsmdata = await state.get_data()
        if user.phone_number:
            return
        elif fsmdata.get('course'):
            course = fsmdata.get('course')
            add_phonenumber = await db_requests.add_phonenumber_for_user(user.id, message.contact.phone_number[1:] if message.contact.phone_number.startswith('+') else message.contact.phone_number)
            if add_phonenumber:
                if course.price == 0:
                    builder = InlineKeyboardBuilder()
                    builder.button(text='üî• –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É!', callback_data=f'select_course_{course.id}')
                    now = datetime.datetime.utcnow()
                    await db_requests.add_course_to_user(user.id, course.id, now)
                    await message.answer(f'–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å <b>{course.title}</b>!', reply_markup=types.ReplyKeyboardRemove())
                    await message.answer('–ù–∞—á–∞—Ç—å —É—á–∏—Ç—å—Å—è?', reply_markup=builder.as_markup())
                    return
                if not config.SECRET_PRODAMUS_KEY:
                    if config.DEMO:
                        user = await db_requests.get_user_by_telegram_id(message.from_user.id)
                        now = datetime.datetime.utcnow()
                        await db_requests.add_course_to_user(user.id, course.id, now)
                        builder = InlineKeyboardBuilder()
                        builder.button(text='üî• –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É!', callback_data=f'select_course_{course.id}')
                        await message.answer(f'‚úÖ –î–ª—è –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É <b>{course.title}</b> –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ.\n', reply_markup=types.ReplyKeyboardRemove())
                        await message.answer(f'–°–∫–æ—Ä–µ–π –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –±–æ—Ç–∞!', reply_markup=builder.as_markup())
                        return
                    else:   
                        builder = InlineKeyboardBuilder()
                        builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
                        await message.answer('‚õîÔ∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())
                        await message.answer('–ü–æ–∫–∞ —á—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å –Ω–µ–ª—å–∑—è ü§∑üèª‚Äç‚ôÇÔ∏è', reply_markup=builder.as_markup())
                        return
                order_id = await db_requests.create_order(course.id, user.id)
                payment_link = await generate_payment_link(order_id, user.phone_number, course.id)
                message_text = (f'–î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É <b>{course.title}</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø".\n'
                                '‚Ü™Ô∏è –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n\n'
                                '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.\n\n'
                                '‚è± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
                builder = InlineKeyboardBuilder()
                builder.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', url=payment_link)
                builder.button(text='üí± –û–ø–ª–∞—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä—É', callback_data=f'direct_payment_{course.id}')
                builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
                builder.adjust(1)
                await message.answer('‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.', reply_markup=types.ReplyKeyboardRemove())
                await message.answer(message_text, reply_markup=builder.as_markup())
            else:
                message_text = '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–∞.'
                await message.answer(message_text)
        

@router.callback_query(F.data.startswith("direct_payment_"))
async def request_to_course_by_user(callback: CallbackQuery, state: FSMContext):
    course = await db_requests.get_course_by_id(callback.data[15:])
    user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    user_message_text = '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É.'
    message_text = (f'‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_name} (+{user.phone_number}) –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–∞ {course.title}.\n\n'
                    '–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∫—É—Ä—Å, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–º—É –¥–æ—Å—Ç—É–ø.')
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –ö—É—Ä—Å –æ–ø–ª–∞—á–µ–Ω. –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø', callback_data=f'open_course_{course.id}.user_{user.id}')
    await callback.message.edit_text(user_message_text)
    for admin in admins_ids:
        try:
            await bot.send_message(admin, message_text, reply_markup=builder.as_markup())
        except:
            pass


@router.callback_query(F.data.startswith("open_course_"))
async def open_course_to_user(callback: CallbackQuery, state: FSMContext):
    callback_message = callback.data.split('.')
    course = await db_requests.get_course_by_id(callback_message[0][12:])
    user = await db_requests.get_user_by_id(callback_message[1][5:])
    now = datetime.datetime.utcnow()
    if await check_course_availability(user.id, course.id):
        await callback.message.edit_text(f'‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_name} –∫—Ç–æ-—Ç–æ —É–∂–µ –æ—Ç–∫—Ä—ã–ª –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É {course.title}.')
        return
    add_course = await db_requests.add_course_to_user(user.id, course.id, now)
    
    if add_course:
        await bot.send_message(user.user_telegram_id, f'‚úÖ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É {course.title}.')
        await callback.message.edit_text(f'‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_name} –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É {course.title}')
    else:
        await callback.message.answer('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫—É—Ä—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')


'''–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ –∫—É—Ä—Å–∞
course = await db_requests.get_course_by_id(callback.data[11:])
        user = await db_requests.get_user_by_telegram_id(callback.from_user.id)
        now = datetime.datetime.utcnow()
        await db_requests.add_course_to_user(user.id, course.id, now)
        message_text = '‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω.'
        builder = InlineKeyboardBuilder()
        builder.button(text='üìÇ –û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å', callback_data=f'select_course_{course.id}')
        builder.button(text='üîô –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤', callback_data='courses')
        builder.adjust(1)
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())

'''

@router.callback_query(F.data.startswith("add_course_description_"))
async def add_course_description(callback: CallbackQuery, state: FSMContext):
    course = await db_requests.get_course_by_id(callback.data[23:])
    await state.update_data(course=course)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
    if course.description:
        message_text = (f'–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–∞ <b>{course.title}</b>:\n\n'
                        f'"{course.description}"\n\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫—É—Ä—Å—É.')
    else:
        message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—É—Ä—Å—É.'
    await state.set_state(AddCourseDescription.waiting_for_text)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddCourseDescription.waiting_for_text))
async def course_description_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    course = fsmdata.get('course')
    if len(message.text) < 2500:
        description_text = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—É—Ä—Å—É —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–î–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å https://pr-cy.ru/textlength/', reply_markup=builder.as_markup())
        return
    
    upload_status = await db_requests.add_description_for_course(course.id, description_text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫—É—Ä—Å—É.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("edit_course_name_"))
async def add_course_description(callback: CallbackQuery, state: FSMContext):
    course = await db_requests.get_course_by_id(callback.data[17:])
    await state.update_data(course=course)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
    message_text = (f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: <b>{course.title}</b>\n\n'
                    '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫—É—Ä—Å—É.')
    await state.set_state(EditCourseName.waiting_for_text)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(EditCourseName.waiting_for_text))
async def new_course_name_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    course = fsmdata.get('course')
    upload_status = await db_requests.edit_course_name(course.id, message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
    if upload_status:
        await message.answer(f'‚úÖ –ò–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("add_course_price_"))
async def add_course_description(callback: CallbackQuery, state: FSMContext):
    course = await db_requests.get_course_by_id(callback.data[17:])
    await state.update_data(course=course)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
    if course.price:
        message_text = (f'–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ <b>{course.price}</b> —Ä—É–±–ª–µ–π.\n\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫—É—Ä—Å—É.\n\n'
                        '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å "0", —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.')
    else:
        message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å "0", —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.'
    await state.set_state(AddPriceForCourse.waiting_for_new_price)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(F.text, StateFilter(AddPriceForCourse.waiting_for_new_price))
async def course_price_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    course = fsmdata.get('course')
    if message.text.isdigit():
        new_price = int(message.text)
        print(new_price)
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
        await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ —Ä—É–±–ª—è—Ö –±–µ–∑ –∫–æ–ø–µ–µ–∫, —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.', reply_markup=builder.as_markup())
        return
    
    upload_status = await db_requests.add_price_for_course(course.id, new_price)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ö –∫—É—Ä—Å—É', callback_data=f'select_course_{course.id}')
    if upload_status:
        await message.answer(f'‚úÖ –î–æ–±–∞–≤–∏–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data.startswith("change_course_available_"))
async def change_course_available(callback: CallbackQuery, state: FSMContext):
    course = await db_requests.get_course_by_id(callback.data[24:])
    admins_ids = [admin.user_telegram_id for admin in await db_requests.get_admins()]
    await db_requests.change_course_availability(course.id)
    modules = await db_requests.get_course_modules(course.id)
    builder = InlineKeyboardBuilder()

    for id, module in enumerate(modules):
        builder.button(text=f'{id + 1}. {module.title}', callback_data=f'select_module_{module.id}')
    if course.chat_link:
        builder.button(text='üí¨ –ß–∞—Ç –∫—É—Ä—Å–∞', url=f'tg://join?invite={course.chat_link}')
    else:
        builder.button(text='üí¨ –ß–∞—Ç –∫—É—Ä—Å–∞', callback_data='no_course_chat')
    if callback.from_user.id in admins_ids:
        builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å', callback_data=f'add_new_module_to_{course.id}')
        if course.description:
            builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'add_course_description_{course.id}')
        else:
            builder.button(text='‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'add_course_description_{course.id}')
        if course.price:
            builder.button(text='üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data=f'add_course_price_{course.id}')
        else:
            builder.button(text='üí≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data=f'add_course_price_{course.id}')
        if course.available:
            builder.button(text='‚úÖ –ö—É—Ä—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', callback_data=f'change_course_available_{course.id}')
        else:
            builder.button(text='‚ùå –ö—É—Ä—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', callback_data=f'change_course_available_{course.id}')
        builder.button(text='üì® –†–∞—Å—Å—ã–ª–∫–∞', callback_data=f'admin_send_message_to_all_users_course_{course.id}')
        builder.button(text='üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å', callback_data=f'm_delete_course_{course.id}')
    builder.button(text='üîô –í—ã–±–æ—Ä –∫—É—Ä—Å–∞', callback_data='courses')
    builder.adjust(1)
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
